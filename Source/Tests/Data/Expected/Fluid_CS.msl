#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct Scene
{
    float wallStiffness;
    float4 gravity;
    float3 planes[4];
};

struct type_cbSimulationConstants
{
    float timeStep;
    Scene scene;
};

struct Particle
{
    float2 position;
    float2 velocity;
};

struct type_RWStructuredBuffer_Particle
{
    Particle _m0[1];
};

struct type_StructuredBuffer_Particle
{
    Particle _m0[1];
};

struct ParticleForces
{
    float2 acceleration;
};

struct type_StructuredBuffer_ParticleForces
{
    ParticleForces _m0[1];
};

kernel void main0(constant type_cbSimulationConstants& cbSimulationConstants [[buffer(0)]], device type_RWStructuredBuffer_Particle& particlesRW [[buffer(1)]], const device type_StructuredBuffer_Particle& particlesRO [[buffer(2)]], const device type_StructuredBuffer_ParticleForces& particlesForcesRO [[buffer(3)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    float2 _52 = particlesRO._m0[gl_GlobalInvocationID.x].position;
    float2 _54 = particlesRO._m0[gl_GlobalInvocationID.x].velocity;
    float2 _56 = particlesForcesRO._m0[gl_GlobalInvocationID.x].acceleration;
    float3 _59 = float3(_52, 1.0);
    float _67 = -cbSimulationConstants.scene.wallStiffness;
    float2 _102 = _54 + ((((((_56 + (cbSimulationConstants.scene.planes[0u].xy * (fast::min(dot(_59, cbSimulationConstants.scene.planes[0u]), 0.0) * _67))) + (cbSimulationConstants.scene.planes[1u].xy * (fast::min(dot(_59, cbSimulationConstants.scene.planes[1u]), 0.0) * _67))) + (cbSimulationConstants.scene.planes[2u].xy * (fast::min(dot(_59, cbSimulationConstants.scene.planes[2u]), 0.0) * _67))) + (cbSimulationConstants.scene.planes[3u].xy * (fast::min(dot(_59, cbSimulationConstants.scene.planes[3u]), 0.0) * _67))) + cbSimulationConstants.scene.gravity.xy) * cbSimulationConstants.timeStep);
    particlesRW._m0[gl_GlobalInvocationID.x].position = _52 + (_102 * cbSimulationConstants.timeStep);
    particlesRW._m0[gl_GlobalInvocationID.x].velocity = _102;
}

